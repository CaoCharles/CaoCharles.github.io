<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charles&#39;s Blog</title>
  
  <subtitle>test</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://caocharles.github.io/"/>
  <updated>2018-09-26T02:40:57.775Z</updated>
  <id>https://caocharles.github.io/</id>
  
  <author>
    <name>查爾斯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>進階創新科技技術(第一周)</title>
    <link href="https://caocharles.github.io/%E9%80%B2%E9%9A%8E%E5%89%B5%E6%96%B0%E7%A7%91%E6%8A%80%E6%8A%80%E8%A1%93/"/>
    <id>https://caocharles.github.io/進階創新科技技術/</id>
    <published>2018-09-26T02:38:16.000Z</published>
    <updated>2018-09-26T02:40:57.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="進階創新科技技術共編-第一個禮拜"><a href="#進階創新科技技術共編-第一個禮拜" class="headerlink" title="進階創新科技技術共編(第一個禮拜)"></a>進階創新科技技術共編(第一個禮拜)</h1><ul><li>每周的錄音檔都放在這裡<br><a href="https://drive.google.com/drive/folders/1jQl4cLGAwekYkz6gSCDlR7wwxA4dqbzP?usp=sharing" target="_blank" rel="noopener">https://drive.google.com/drive/folders/1jQl4cLGAwekYkz6gSCDlR7wwxA4dqbzP?usp=sharing</a></li></ul><h2 id="胖胖女老師-要求"><a href="#胖胖女老師-要求" class="headerlink" title="胖胖女老師 (要求)"></a>胖胖女老師 (要求)</h2><ul><li>爬蟲 PTT、FB</li><li>特定網站 (文章)</li><li>參考文獻 (有興趣的主題)</li><li>老師只有上六週的課程</li><li>文字分析為主 結構化資料也可以</li><li>Kagle、政府的公開資料、Researched Data</li><li>從NLP上知道商品的行情</li><li>專家系統是甚麼?</li></ul><h2 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h2><ul><li>要啥的資料集，NLTK</li><li>一組報一篇 NLP 的研究、論文、文獻探討</li><li>下禮拜就可以做這件事</li><li>我有錄音嘻嘻</li><li>臭噁男博士生(人家只是年齡比較大ㄅ…) 我說禮拜一那個</li><li>HI-EXPEND 是啥意思 (花比較多錢來讀書的人)</li><li>說得好，我華山派…</li><li>要幹嘛<ul><li>語意分析</li><li>情感分析</li><li>網路聲量分析，都不容易</li></ul></li></ul><h3 id="Sources-of-Big-Data"><a href="#Sources-of-Big-Data" class="headerlink" title="Sources of Big Data"></a>Sources of Big Data</h3><ul><li><p>In addition to accumulation of traditional data of transactions:</p><ul><li><p>Data warehousing (資料倉儲)</p></li><li><p>Cloud computing</p></li><li><p>Social network</p></li><li><p>Internet of Things (IOT)</p></li></ul></li><li><p>The business data volume is therefore increasing dramatically.</p></li><li><p>Some important attributes may be embedded in or mined from the big volume of data.</p></li><li><p>Therefore, data management issues for the big data are getting 蝦咪挖歌的.</p></li></ul><h3 id="Common-Framework-of-Big-Data"><a href="#Common-Framework-of-Big-Data" class="headerlink" title="Common Framework of Big Data"></a>Common Framework of Big Data</h3><ul><li>六個V(自己查)<ul><li>Volume</li><li>Velocity</li><li>Variety</li><li>Veracity</li><li>Value</li><li>深V</li></ul></li></ul><p><img src="https://i.imgur.com/dqC1lrY.png" alt=""></p><p><a href="https://i.imgur.com/U98MFAU.png" target="_blank" rel="noopener">我的帥照</a>(屁啦)</p><h3 id="非監督式學習"><a href="#非監督式學習" class="headerlink" title="非監督式學習"></a>非監督式學習</h3><ul><li>牛奶跟啤酒(關聯式資料)- </li></ul><h3 id="監督式學習"><a href="#監督式學習" class="headerlink" title="監督式學習"></a>監督式學習</h3><ul><li>一生只督你一人</li><li>有Y那一條的可以督</li><li>督的越準、越夯(XGBOOST、DNN)</li><li>決策樹(Desision tree) (最老的那種)</li></ul><h3 id="增強式學習"><a href="#增強式學習" class="headerlink" title="增強式學習"></a>增強式學習</h3><h3 id="深度學習-類神經網路"><a href="#深度學習-類神經網路" class="headerlink" title="深度學習(類神經網路)"></a>深度學習(類神經網路)</h3><h3 id="AI的三大應用"><a href="#AI的三大應用" class="headerlink" title="AI的三大應用"></a>AI的三大應用</h3><ul><li>語言辨識</li></ul><h3 id="Prescriptive-Analysis"><a href="#Prescriptive-Analysis" class="headerlink" title="Prescriptive Analysis"></a>Prescriptive Analysis</h3><ul><li>名詞:指導性分析</li><li>釋義:根據預測分析的結果，總結及建議不同結果的優化行動。</li><li>方法:透過預測分析結果，進行決策</li></ul><h3 id="NTLK-好像這才是重點"><a href="#NTLK-好像這才是重點" class="headerlink" title="NTLK (好像這才是重點)"></a>NTLK (好像這才是重點)</h3><ul><li>找一篇paper來報告</li><li><p><a href="https://textminingonline.com/dive-into-nltk-part-i-getting-started-with-nltk" target="_blank" rel="noopener">textminingonline.nltk</a></p></li><li><p>載一下套件</p></li><li><p><a href="https://www.nltk.org/install.html" target="_blank" rel="noopener">網頁在這</a> 載好久</p></li></ul><p><img src="https://i.imgur.com/FiEFnmf.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 語料庫在這</span></span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> brown</span><br><span class="line">brown.words()[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">brown.tagged_words()[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">len(brown.words())</span><br><span class="line">dir(brown)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 斷句</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 斷字</span></span><br><span class="line">tokens = word_tokenize(text)</span><br></pre></td></tr></table></figure><h3 id="Tokenizers"><a href="#Tokenizers" class="headerlink" title="Tokenizers"></a>Tokenizers</h3><ul><li>好多Token，好想玩桌遊。(傻眼….)</li><li>Token -&gt; 璀璨寶石<h3 id="第三堂課"><a href="#第三堂課" class="headerlink" title="第三堂課"></a>第三堂課</h3></li><li><p>Part-Of-Speech Tagging-1 </p><ul><li>最重要的文字分析之一</li><li>…投影片都有(也是)</li></ul></li><li><p>Part of speech tagging-2</p><ul><li>.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> treebank</span><br><span class="line">len(treebank.tagged_sents())</span><br><span class="line">train_data = treebank.tagged_sents()[:<span class="number">3000</span>]</span><br><span class="line">print(train_data)</span><br><span class="line">test_data = treebank.tagged_sents()[<span class="number">3000</span>:]</span><br><span class="line">print(test_data)</span><br></pre></td></tr></table></figure><p>竟能如此優秀 &lt;3(謝東森)</p><h3 id="助教精華-身材跟柏龍一樣-還蠻可愛的"><a href="#助教精華-身材跟柏龍一樣-還蠻可愛的" class="headerlink" title="助教精華(身材跟柏龍一樣)還蠻可愛的"></a>助教精華(身材跟柏龍一樣)還蠻可愛的</h3><ul><li>需要加入記憶的結構</li><li>裝備很重要嗎 ?<ul><li>…</li><li>…</li></ul></li><li>助教除了聲音檔都可以幫我們爬</li><li>柏龍想抓AV女優圖(乾我闢是)</li><li>表特版抓圖(我好像有抓過) 我抓過西斯&lt;3(想要++) (太讚啦~)<ul><li><a href="https://hackmd.io/6RIZ7tcyRymbihSUfCyIEw?view" target="_blank" rel="noopener">https://hackmd.io/6RIZ7tcyRymbihSUfCyIEw?view</a></li></ul></li><li>助教剛剛說甚麼模型是最差的 ?</li><li>容易過度配飾的模型很差(應該吧)(適拉幹)</li><li>87萬張圖(好猛)變成8萬張而已</li><li>感覺就跟AI相機一樣</li><li>混淆矩陣(到底會不會進複賽呢~好刺激)</li></ul><h3 id="一個對話機器人"><a href="#一個對話機器人" class="headerlink" title="一個對話機器人"></a>一個對話機器人</h3><ol><li>AI is A Brand’s New Face</li><li>Mind the tech Details</li><li>Know the difference between conversation AI and conventional chatbots</li><li>Integrate Key Data Sets</li></ol><h3 id="Crawler-amp-Data-Cleanup"><a href="#Crawler-amp-Data-Cleanup" class="headerlink" title="Crawler &amp; Data Cleanup"></a>Crawler &amp; Data Cleanup</h3><p>1.爬蟲，隨機抽資料<br>2.採用Python packages或 BASH shells皆可<br>3.實驗室有PTT的爬蟲資料<br>4.建議先學習基本linux指令<br>5.高頻字與低頻字，都比不上可以清理因素的字</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><ul><li>幸好還有助教…</li><li>有人想跟博班一組ㄇ</li><li>我們四個一組不是嗎</li><li>NLP的文章(要找啥)-各自找在混一波嗎</li><li>產品的聲量(上游不太知道通路購買的消費者資料)</li><li>topical model</li><li>我的鮮奶茶機器人</li></ul><h3 id="下禮拜的作業"><a href="#下禮拜的作業" class="headerlink" title="下禮拜的作業"></a>下禮拜的作業</h3><ul><li>找出分析NLP的方法嗎 ?</li><li>我先讀東森說的那兩篇，一些小摘要、心得和 murmur 記錄在<a href="https://hackmd.io/XT1NAWXDT8KwmPgdO2gfIg" target="_blank" rel="noopener">這邊</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;進階創新科技技術共編-第一個禮拜&quot;&gt;&lt;a href=&quot;#進階創新科技技術共編-第一個禮拜&quot; class=&quot;headerlink&quot; title=&quot;進階創新科技技術共編(第一個禮拜)&quot;&gt;&lt;/a&gt;進階創新科技技術共編(第一個禮拜)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;每周的錄音檔
      
    
    </summary>
    
      <category term="進階創新科技技術" scheme="https://caocharles.github.io/categories/%E9%80%B2%E9%9A%8E%E5%89%B5%E6%96%B0%E7%A7%91%E6%8A%80%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="Pytorch" scheme="https://caocharles.github.io/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>統研深度學習讀書會</title>
    <link href="https://caocharles.github.io/%E7%B5%B1%E7%A0%94%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92%E8%AE%80%E6%9B%B8%E6%9C%83/"/>
    <id>https://caocharles.github.io/統研深度學習讀書會/</id>
    <published>2018-09-20T15:43:20.000Z</published>
    <updated>2018-09-26T02:31:58.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="讀書會簡介"><a href="#讀書會簡介" class="headerlink" title="讀書會簡介"></a>讀書會簡介</h2><p>大家好，這是我和立諭發起的讀書會，這個讀書會的目的是希望透過討論及分享來學習Machine Learning + Deep Learning，希望大家以後不要失業(來自東森的提醒)</p><h2 id="先備知識"><a href="#先備知識" class="headerlink" title="先備知識"></a>先備知識</h2><ul><li>微積分(微分吧)</li><li>線性代數(向量輸入後的傳導及運算)</li></ul><p>我們這學年的進度大致簡單介紹如下(暫定)</p><h2 id="上學期"><a href="#上學期" class="headerlink" title="上學期"></a>上學期</h2><ul><li>一開始先帶大家入門程式，但還不確定要從 Keras 或是 TensorFlow 入手</li><li>之後大家就每周做個作業，然後也要看個課程</li><li>課程方面應該以李宏毅的 Machine Learing 為主，他的課有以下特點<ul><li>強調無痛入門，而且涉及的領域很廣，圖像及語音辨識、語意分析等等</li><li>上課方式有趣，基本上不會有枯燥的感覺</li><li>更重要的是李老師上課講的都是很新的內容，總之入門真的推薦</li></ul></li><li>實作方面的資源很多，再慢慢介紹</li><li>大家有時間的話可以報名一些比賽，例如黑克松或是 Kaggle </li><li>討論實作上的技巧、觀念及問題</li><li>Scikit-Learn (機器學習 ML 套件)，比較次要，<br>但還是希望大家能大致了解，下學期的多變量會輕鬆許多</li></ul><h2 id="寒假"><a href="#寒假" class="headerlink" title="寒假"></a>寒假</h2><p>寒假大家可能很忙，但希望大家還是能撥點時間看些相關的東西</p><ul><li>林軒田的機器學習基石跟技法<ul><li>蠻理論的不過大家是碩士會理論應該的所以還是硬著頭皮看吧</li><li>講的東西其實都蠻原始的，有些東西其實已經沒人在用了</li><li>但是起源的東西我覺得聽一聽多少會有幫助</li><li>可能會聽到崩潰，應該是我太笨(可能只有AI真正懂)</li><li>聽說其實作業超爆難(by 資科-劉昭麟教授)</li><li>但是大家也不用寫作業，就大家自己看一看就好(吧)</li></ul></li></ul><h2 id="下學期"><a href="#下學期" class="headerlink" title="下學期"></a>下學期</h2><p>碩一下課業會挺重的，但好像也還好，<br>多變量這門課如果上學期有在讀書會學到東西其實應該會蠻輕鬆的</p><ul><li>論文探討，如果是很新的希望我們能把它實作出來看看</li><li>期望大家有找到自已想做的項目，我們很樂意一起討論或是提供幫助，<br>最好的情況是你們可以指導我們嘻嘻</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;讀書會簡介&quot;&gt;&lt;a href=&quot;#讀書會簡介&quot; class=&quot;headerlink&quot; title=&quot;讀書會簡介&quot;&gt;&lt;/a&gt;讀書會簡介&lt;/h2&gt;&lt;p&gt;大家好，這是我和立諭發起的讀書會，這個讀書會的目的是希望透過討論及分享來學習Machine Learning + D
      
    
    </summary>
    
      <category term="讀書會" scheme="https://caocharles.github.io/categories/study-group/"/>
    
    
      <category term="Deep Learning" scheme="https://caocharles.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>深度學習</title>
    <link href="https://caocharles.github.io/%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92/"/>
    <id>https://caocharles.github.io/深度學習/</id>
    <published>2018-08-28T16:12:21.000Z</published>
    <updated>2018-09-04T14:30:28.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="類神經網路-歷史"><a href="#類神經網路-歷史" class="headerlink" title="類神經網路 歷史"></a>類神經網路 歷史</h2><p>人工智慧最早出現於1950年代。人工智慧的目標是希望能讓電腦像人一班思考與學習。被視為人工智慧之父的圖靈(Alan Mathison Turing)，提出了有名的圖靈測試:人類與機器對話，如果人類無法根據這些對話過程判斷對方是人或機器，即通過測試，認為這台電腦具有人工智慧。</p><p>隨著AI的發展日益茁壯，1980年代(Jhon Searle)，提出了對人工智慧的分類方式:</p><ul><li><p>強人工智慧(Strong AI) : 機器與人具有完整的認知能力。</p></li><li><p>弱人工智慧(Weak AI) : 機器設計看起來具有智慧即可。</p></li></ul><p>而深度學習是人工智慧中，現今成長最快的領域，隨著電腦的普及以及其CPU、GPU運算能力增強，我們可以透過世界上各個資料庫收集大量資料，將資料整理成類神經網路的格式，藉由模擬人類神經網路的運作方式，加上數學的演算法進行更新參數，就可以讓電腦學習分辨日常生活的事物，常見的深度學習架構，如多層感知器MLP、深度神經網路DNN、卷積神經網路CNN、遞迴神經網路RNN。</p><p>而這些深度學習的架構應用在視覺辨識、語音辨識、自然語言處理、生物醫學等領域，皆有非常好的效果。</p><p><img src="https://i.imgur.com/5BFVrX2.png" alt=""></p><p>人工智慧現在已廣泛運用在我們的日常生活之中，像是手寫辨識、圖像辨識、語音辨識，幾乎都存在於人手一台的手機之中，還有更進一步的運用，如自動駕駛，透過硬體上的更新，我們可以裝設感測器感應車子周圍的環境狀況，加上圖像辨識，並整合成資訊讓電腦判斷是否停車或繼續行駛，透過演算法讓電腦知道該如何做決定，到最後將會實現在市區行駛之中，隨著科技越來越進步，深度學習所應用的領域就越來越廣。</p><h2 id="類神經網路-簡介"><a href="#類神經網路-簡介" class="headerlink" title="類神經網路 簡介"></a>類神經網路 簡介</h2><p>[維基百科]</p><p>類神經網路簡稱（英語：Artificial Neural Network，ANN），簡稱<strong>神經網路</strong>（Neural Network，NN）或<strong>類神經網路</strong>，在機器學習和認知科學領域，是一種模仿生物神經網路（動物的中樞神經系統，特別是大腦）的結構和功能的數學模型或計算模型，用於對函式進行估計或近似。神經網路由大量的人工神經元聯結進行計算。大多數情況下人工神經網路能在外界資訊的基礎上改變內部結構，是一種自適應系統，通俗的講就是具備學習功能。</p><p>現代神經網路是一種非線性統計性資料建模工具。典型的神經網路具有以下三個部分：</p><ul><li><p><strong>結構</strong>（<strong>Architecture</strong>）<br>結構指定了網路中的變數和它們的拓撲關係。<br>例如:神經網路中的變數可以是神經元連接的權重（weights）和神經元的激勵值（activities of the neurons）。</p></li><li><p><strong>激勵函式（Activity Rule）</strong><br>大部分神經網路模型具有一個短時間尺度的動力學規則，來定義神經元如何根據其他神經元的活動來改變自己的激勵值。一般激勵函式依賴於網路中的權重（即該網路的參數）。</p></li></ul><ul><li><strong>學習規則（Learning Rule）</strong><br>學習規則指定了網路中的權重如何隨著時間推進而調整。</li></ul><p><img src="https://i.imgur.com/Gmo3LfJ.png" alt=""></p><p>上圖為一個簡單的多層感知器，我們利用這個網路</p><h2 id="類神經網路-應用"><a href="#類神經網路-應用" class="headerlink" title="類神經網路 應用"></a>類神經網路 應用</h2><p><img src="https://i.imgur.com/ZK2OR9D.png" alt=""></p><p>應用</p><ul><li><p>手寫辨識</p><p>  利用Python下tensorflow模組中的MNIST資料，收集了數萬筆掃描過的圖檔及標籤，我們可以利用各種類神經網路模型建立分類器模型，依據模型的特性加以訓練，並可將訓練過的模型儲存，用來預測手寫板上的數字。</p></li><li><p>圖像辨識</p><p>  現今電腦辨識一般的圖片已經等同於人類的辨識率，甚至在反應的速度上會超過人類，但在動態影像的辨識度還有加強的空間，透過各種演算法的測試與改進，最終將會應用在自動駕駛等應用上。 </p></li><li><p>自然語言處理</p><p>  自然語言(Nature Language Processing, NLP)，是讓電腦學習理解人類所說的話語與文字，透過分析詞性，計算其詞向量等等，並運用樸素貝氏分類器將句子分類，來分析日常對話的含意，其產出有現在熱門的聊天機器人及FB所提供的(Facebook Messenger Platform)和line所推出的(Messaging API)。</p></li></ul><p><img src="https://i.imgur.com/Lc1XSE5.png" alt=""></p><p>AI與大數據的應用只會越來越深、越來越廣、越來越快，只要對科技發展有興趣的人，就可以踏入這塊領域了解AI的偉大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;類神經網路-歷史&quot;&gt;&lt;a href=&quot;#類神經網路-歷史&quot; class=&quot;headerlink&quot; title=&quot;類神經網路 歷史&quot;&gt;&lt;/a&gt;類神經網路 歷史&lt;/h2&gt;&lt;p&gt;人工智慧最早出現於1950年代。人工智慧的目標是希望能讓電腦像人一班思考與學習。被視為人工智
      
    
    </summary>
    
      <category term="深度學習" scheme="https://caocharles.github.io/categories/deep-learning/"/>
    
    
      <category term="Deep Learning" scheme="https://caocharles.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>EM演算法</title>
    <link href="https://caocharles.github.io/EM%E6%BC%94%E7%AE%97%E6%B3%95/"/>
    <id>https://caocharles.github.io/EM演算法/</id>
    <published>2018-08-28T09:31:35.000Z</published>
    <updated>2018-09-10T04:33:56.835Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/1121509ac1dc" target="_blank" rel="noopener">參考網址</a><br><a href="http://web.mit.edu/6.435/www/Dempster77.pdf" target="_blank" rel="noopener">Maximum Likelihood from Incomplete Data via the EM Algorithm</a></p><hr><p><strong>最大期望演算法</strong>（<strong>Expectation-maximization algorithm</strong>，又稱<strong>期望最大化算法</strong>）<br>在資料分析中常用於分群，在給定群數及機率模型下，去尋找觀測值變數間的所隱藏的訊息，可用此演算法來估計機率模型中的參數估計或遺失值填補。</p><hr><h2 id="名詞介紹"><a href="#名詞介紹" class="headerlink" title="名詞介紹"></a>名詞介紹</h2><ul><li><p>樣本: $x$</p></li><li><p>概似函數:  $L(\theta|x)=p(x|\theta)$</p></li><li><p>目的: 找到能讓 $L(\theta|x)$ 最大化的參數</p></li></ul><p>我的想法就是找到符合我們樣本資料的”最大”概似函數的機率模型參數，<br>以往都是假設好機率模型中的參數，並計算其MLE，<br>現在透過樣本及樣本所隱藏的隱變數，來推導適合這些樣本的模型參數。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul><li>argument : $y$ (遺失值或是隱變數)</li><li>complete-data likelihood : $L(\theta|x,y)=p(x,y|\theta)$ 加入隱變數後完整的概似函數</li><li>What about $max_\theta L(x,y)$?</li><li>need to recursively update y and $\hat\theta$?</li></ul><h2 id="E步驟-更新y"><a href="#E步驟-更新y" class="headerlink" title="E步驟(更新y)"></a>E步驟(更新y)</h2><p>根據現在給定的模型參數及樣本觀測值，我們去計算其log完整概似函數的期望值如下:<br>$$Q(\theta|\theta^{(t)})\equiv E_y[log p(x,y|\theta)|x,\theta^{(t)}]$$</p><h2 id="M步驟-更新參數-theta"><a href="#M步驟-更新參數-theta" class="headerlink" title="M步驟(更新參數$\theta$)"></a>M步驟(更新參數$\theta$)</h2><p>最大化E步驟獲得的期望值<br>$$\theta^{(t+1)} = arg max_\theta  Q(\theta|\theta^{t})$$</p><p><strong>重複上述過程直到收斂</strong></p><h2 id="EM推導"><a href="#EM推導" class="headerlink" title="EM推導"></a>EM推導</h2><ul><li>$X:observed \space data$</li><li>$Y:latent\space variable$</li></ul><p>$Log\space likelihood \space function$</p><p>$$ l(\theta) $$</p><p>$$= lnP(X|\theta) $$</p><p>$$= ln\sum_yP(X,y|\theta) $$</p><p>$$= ln(\sum_yP(X,y|\theta))\frac{Q(y)}{Q(y)}$$</p><p>$$\ge\sum_yQ(y)ln\frac{P(X,y|\theta)}{Q(y)} $$</p><p>$$\because log \in concave\space by\space Jensen’s\space inequality $$</p><p>$$(解決ln\sum 不好計算的問題，Q:機率分配) $$</p><p>$$= E_Q(ln\frac{P(X,y|\theta)}{Q(y)})$$</p><p>在$Jensen’s \: inequality 中，當E(x)中，x=常數時，等號成立。$</p><p>$$\Rightarrow\frac{P(X,y|\theta)}{Q(y)}=c \in Constant，且\sum_yQ(y)=1$$</p><p>$$\Rightarrow\sum_yP(X,y|\theta)=c\sum_yQ(y)=c$$</p><p>$$\Rightarrow Q(y)=\frac{P(X,y|\theta)}{\sum_yP(X,y|\theta)}=P(y|x_i,\theta)$$，</p><p>$$Q:在樣本給定下之隱藏變數條件分布$$</p><p>$$\therefore E_Q(ln\frac{P(X,y|\theta)}{Q(y)})=E_y(ln\frac{P(X,y|\theta)}{P(y|x_i,\theta)}|X,\theta)$$</p><p>$$\theta^{(t+1)}=arg\max\limits_\theta l(\theta)\Longleftrightarrow arg\max\limits_\theta\sum_{y}P(y|x_i,\theta^{(t)})ln\frac{P(X,y|\theta)}{P(y|x_i,\theta^{(t)})}$$</p><p>$$\: \: \Longleftrightarrow arg\max\limits_\theta\sum_{y}P(y|x_i,\theta^{(t)})lnP(X,y|\theta)=E_y(lnP(X,y|\theta)|X,\theta^{(t)})=Q(\theta|\theta^{(t)})$$</p><p>$$\therefore E-step :Find \: Q(\theta|\theta^{(t)})$$</p><p>$\Longleftrightarrow$ Find the expectation of the complete-data loglikelihood with respect to the missing data y given the observed data x and the current parameter estimates $\theta^{(t)}$.</p><p>$$M-step=\theta^{(t+1)}=arg\max\limits_\theta Q(\theta|\theta^{(t)})$$</p><h2 id="EM收斂性"><a href="#EM收斂性" class="headerlink" title="EM收斂性"></a>EM收斂性</h2><hr><h2 id="範例1"><a href="#範例1" class="headerlink" title="範例1"></a>範例1</h2><p>197 animals are distributed multinomially into four categories with cell-probabilities$(\frac{1}{2}+ \frac{\theta}{4}, \frac{(1-\theta)}{4}, \frac{(1-\theta)}{4}, \frac{\theta}{4})$, where $\theta \in (0,1)$is unknown</p><p>Observed Data:<br>$$x=(x_1,x_2,x_3,x_4)=(125,18,20,34)$$</p><p>Likelihood:<br>$$L(\theta；x)=\frac{n!}{x_1!x_2!x_3!x_4!}(\frac{1}{2}+\frac{\theta}{4})^{x_1}(\frac{1}{4}-\frac{\theta}{4})^{x_2}(\frac{1}{4}-\frac{\theta}{4})^{x_3}(\frac{\theta}{4})^{x_4}$$</p><p>Find MLE by maximizing loglikelihood</p><p>Now use EM to find MLE</p><p>假設我們的隱藏變數在a裡面，令$y=x_{11}+x_{12}$</p><p>完整的變數擴展為$(x_{11},x_{12},x_{2},x_{3},x_{4})$有5個</p><p>初始其參數  $(\frac{1}{2}, \frac{\theta}{4}, \frac{1}{4}-\frac{\theta}{4}, \frac{\theta}{4})$</p><p>其概似函數如下</p><p>$$L(\theta；x)=\frac{n!}{x_{11}!x_{12}!x_2!x_3!x_4!}(\frac{1}{2})^{x_{11}}(\frac{\theta}{4})^{x_{12}}(\frac{1}{4}-\frac{\theta}{4})^{x_{2}+x_{3}}(\frac{\theta}{4})^{x_{4}}$$</p><ul><li>E 步驟</li></ul><p>給定機率模型參數$\theta^{(t)}$和$(x_1,x_2,x_3,x_4)$，$$x_{11}=\frac{2x_{1}}{2+\theta}\quad and \quad x_{12}=\frac{\theta x_{1}}{2+\theta}$$</p><p>推導Q函數(令$y=x_{12}$)<br>$$Q(\theta |\theta^{(t)})=E_y[log p(x,y|\theta)|x, \theta^{(t)}]$$</p><p>$$=E_y[(x_{12}+x_{4})log\theta +(x_{2}+x_{3})log(1-\theta)|x,\theta^{(t)}]$$</p><p>$$=(E_y[x_{12}|x, \theta^{(t)}]+x_{4})log\theta +(x_{2}+x_{3})log(1-\theta)$$</p><p>$$=(\frac{\theta^{(t)}x_{1}}{2+\theta^{(t)}}+x_{4})log\theta + (x_{2}+x_{3})log(1-\theta)$$</p><p>其中$$x_{12}|_{x,\theta^{(t)}}\sim Binomial(x_{1},\frac{\theta^{(t)}}{2+\theta^{(t)}})$$</p><p>$$x_{12}^{(t)}=E_y[x_{12}|x,\theta^{(t)}]=\frac{\theta^{(t)}x_{1}}{2+\theta^{(t)}}$$</p><ul><li>M 步驟</li></ul><p>對Q函數進行微分</p><p>給定$(x_{11},x_{12},x_{3},x_{4},x_{5})$</p><p>$$\theta^{(t+1)}=\frac{x_{12}^{(t)}+x_{4}}{x_{12}^{(t)}+x_{2}+x_{3}+x_{4}}$$</p><p><strong>重複以上步驟到參數迭代至穩定</strong></p><h2 id="R-實作"><a href="#R-實作" class="headerlink" title="R 實作"></a>R 實作</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mult = <span class="keyword">function</span>(theta, x, n)&#123;</span><br><span class="line">    tmp = theta</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:n)&#123;</span><br><span class="line">        <span class="comment"># E-step</span></span><br><span class="line">        x12 = x[<span class="number">1</span>]*(theta/ (<span class="number">2</span> + theta))</span><br><span class="line">        <span class="comment"># M-step</span></span><br><span class="line">        theta = (x12 + x[<span class="number">4</span>])/(x12 + x[<span class="number">2</span>] + x[<span class="number">3</span>] + x[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">        tmp = c(tmp, theta)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">x=c(<span class="number">125</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">34</span>)</span><br><span class="line">mult(<span class="number">0.1</span>, x, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="範例2"><a href="#範例2" class="headerlink" title="範例2"></a>範例2</h2><h2 id="範例3"><a href="#範例3" class="headerlink" title="範例3"></a>範例3</h2><p>假設現在有兩枚硬幣A、B</p><ul><li><p><step1>我們用一枚公正的硬幣來決定，投擲 A 或 B 硬幣</step1></p></li><li><p><step2>依據<step1>結果，投擲 A 或 B 硬幣 1次，記錄其結果</step1></step2></p></li><li><p><step3>反覆進行n次，最終可得到類似如下結果: 10111011….</step3></p><ul><li>1表示正面，0表示反面</li></ul></li></ul><p>如果我們今天只能觀察到最終結果<step3>，無法知道每一次投擲來自哪一枚硬幣，該如何估計出兩個硬幣出現正面機率?</step3></p><p><sol>:</sol></p><p>Observed Data : $X=(x_1,x_2,…,x_n), x_i:正面出現次數$<br>A、B 出現正面機率 : $\theta =(p,q)$</p><p>$1^{\circ}$  從MLE想法出發</p><p>概似函數 :<br>$$L(\theta|X)=P(X|\theta)=\prod_{i=1}^nP(x_i|\theta)$$</p><p>$$\hat p=\frac{使用A硬幣骰到正面次數}{使用A硬幣總投擲次數}$$</p><p>$$\hat q=\frac{使用B硬幣骰到正面次數}{使用B硬幣總投擲次數}$$</p><p>但因為我們並不知道 $x_i$來自哪個硬幣(機率模型)，所以無法進行計算。</p><p>$2^{\circ}$ 嘗試添加隱藏變數，使其變成complete data，運用EM演算法</p><ul><li><p>根據observed data，我們無從得知 $x_i$來自哪個硬幣(機率模型)，    </p></li><li><p>因此我們添加一個隱藏變數 $y_i$，其表示 $x_i$ 來自哪個硬幣，$Y=(y_1,y_2,…,y_n)$</p></li></ul><p>$y_i = 1$ or $2$，$x_i|y_{i}=1 \sim Ber(p_{1})$，$x_i|y_{i}=2 \sim Ber(p_{2})$</p><p>E-step :</p><p>$$\Rightarrow Q(\theta|\theta^{(t)})=E_y[ln(p(x,y|\theta))|x,\theta ^{(t)}]=E_y[\sum_{i=1}^{n}ln(p(y_i|\theta)p(x_i|y_i,\theta))|x,\theta^{(t)}]$$</p><p>$$=\sum_{i=1}^{n}E_y[ln(p(y_i|\theta)p(x_i|y_i,\theta))|x,\theta^{(t)}]=\sum_{i=1}^{n}\sum_{y_i=0}^{1}[ln(p(y_i|\theta)p(x_i|y_i,\theta))p(y_i|x_i,\theta^{(t)} )]$$</p><p>$$=\sum_{i=1}^{n}\sum_{j=0}^{1}[ln(p(y_i=j|\theta)p(x_i|y_i,\theta))p(y_i=j|x_i,\theta^{(t)} )]$$</p><p>其中$p(y_i=j|x_i,\theta^{(t)} )$ : 在第t次迭代下，當前數據來自哪個硬幣的機率</p><p>Q-step : </p><1><p>$$\frac{\partial Q}{\partial p}=\frac{\partial (\sum_{i=1}^{n}ln(\frac{1}{2}p^{x_i}(1-p)^{1-x_i})p(y_i=1|x_i,\theta^{(t)} )}{\partial p}$$</p><p>$$=\frac{\partial (\sum_{i=1}^{n}ln(\frac{1}{2})+x_iln(p)+(1-x_i)ln(1-p)p(y_i=1|x_i,\theta^{(t)} )}{\partial p}$$</p><p>$$=\sum_{i=1}^{n}(\frac{xi}{p}-\frac{(1-x_i)}{1-  p})p(y_i=1|x_i,\theta^{(t)} )=0$$</p><p>$$\Rightarrow p^{(t+1)}=\frac{\sum_{i=1}^{n}x_ip(y_i=1|x_i,\theta^{(t)})}{\sum_{i=1}^{n}p(y_i=1|x_i,\theta^{(t)})}$$</p><2><p>$$\frac{\partial Q}{\partial q}=0$$</p><p>同理可得,$$q^{(t+1)}=\frac{\sum_{i=1}^{n}x_ip(y_i=2|x_i,\theta^{(t)})}{\sum_{i=1}^{n}p(y_i=2|x_i,\theta^{(t)})}$$</p><p>$3^{\circ}$ 綜觀以上結果，可以發現實際上我們只需要計算出$p(y_i=j|x_i,\theta^{(t)} )$，就可以拿來進行EM迭代。</p><p>$\Rightarrow$ 給定初始值$(p^{(0)},q^{(0)})$，計算出$p(y_i=j|x_i,\theta^{(0)} )$，代入更新參數$p^{(t+1)},q^{(t+1)}$，重複迭代，直到收斂或者達到自行給定tolerance內.</p><p>$4^{\circ}$ 若<step2>改成依據<step1>結果，連續投擲 A 或 B 硬幣 10次，記錄其結果</step1></step2></p><ul><li><step3>反覆進行n次，最終可得到類似如下結果:<ul><li>1表示正面，0表示反面</li></ul></step3></li></ul><p><img src="https://i.imgur.com/TIuGBly.png" alt=""></p><p>最終Q-step 的參數公式 :<br>$$p^{(t+1)}=\frac{\sum_{i=1}^{n}x_ip(y_i=1|x_i,\theta^{(t)})}{\sum_{i=1}^{n}10p(y_i=1|x_i,\theta^{(t)}}$$</p><p>$$q^{(t+1)}=\frac{\sum_{i=1}^{n}x_ip(y_i=2|x_i,\theta^{(t)})}{\sum_{i=1}^{n}10p(y_i=2|x_i,\theta^{(t)})}$$</p><h2 id="Python-實作"><a href="#Python-實作" class="headerlink" title="Python 實作"></a>Python 實作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5組硬幣投擲結果(n=5,k=10)，1代表正面，0代表反面</span></span><br><span class="line">observations = np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                         [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                         [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                         [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                         [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">da=pd.DataFrame(observations,</span><br><span class="line">                index=[<span class="string">"第一次"</span>,<span class="string">"第二次"</span>,<span class="string">"第三次"</span>,<span class="string">"第四次"</span>,<span class="string">"第五次"</span>])</span><br><span class="line">da.columns = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];da</span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">em_single</span><span class="params">(priors,observations)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    EM算法-單次疊代</span></span><br><span class="line"><span class="string">    ------------</span></span><br><span class="line"><span class="string">    priors:[theta_A,theta_B]</span></span><br><span class="line"><span class="string">    observation:[m X n matrix]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    ---------------</span></span><br><span class="line"><span class="string">    new_priors:[new_theta_A,new_theta_B]</span></span><br><span class="line"><span class="string">    :param priors:</span></span><br><span class="line"><span class="string">    :param observations:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    counts = &#123;<span class="string">'A'</span>: &#123;<span class="string">'H'</span>: <span class="number">0</span>, <span class="string">'T'</span>: <span class="number">0</span>&#125;, <span class="string">'B'</span>: &#123;<span class="string">'H'</span>: <span class="number">0</span>, <span class="string">'T'</span>: <span class="number">0</span>&#125;&#125;</span><br><span class="line">    theta_A = priors[<span class="number">0</span>]</span><br><span class="line">    theta_B = priors[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#E step</span></span><br><span class="line">    <span class="keyword">for</span> observation <span class="keyword">in</span> observations:</span><br><span class="line">        len_observation = len(observation)      <span class="comment">#計算投擲次數</span></span><br><span class="line">        num_heads = observation.sum()           <span class="comment">#正面次數</span></span><br><span class="line">        num_tails = len_observation-num_heads   <span class="comment">#反面次數</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#二項分配公式求解</span></span><br><span class="line">        contribution_A = scipy.stats.binom.pmf(num_heads,len_observation,theta_A)    <span class="comment">#Bin(x,n,p)</span></span><br><span class="line">        contribution_B = scipy.stats.binom.pmf(num_heads,len_observation,theta_B)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#計算在給定資料、當前參數下，資料來自哪個硬幣的機率</span></span><br><span class="line">        weight_A = contribution_A / (contribution_A + contribution_B)     <span class="comment"># p(y=1|x,theta)</span></span><br><span class="line">        weight_B = contribution_B / (contribution_A + contribution_B)     <span class="comment"># p(y=0|x,theta)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#更新在當前參數下A，B硬幣產生的正反面次數</span></span><br><span class="line">        counts[<span class="string">'A'</span>][<span class="string">'H'</span>] += weight_A * num_heads  <span class="comment"># num += 1  =&gt; num = num+1， sum p(y_i=1|x,theta)*x_i</span></span><br><span class="line">        counts[<span class="string">'A'</span>][<span class="string">'T'</span>] += weight_A * num_tails</span><br><span class="line">        counts[<span class="string">'B'</span>][<span class="string">'H'</span>] += weight_B * num_heads</span><br><span class="line">        counts[<span class="string">'B'</span>][<span class="string">'T'</span>] += weight_B * num_tails</span><br><span class="line"></span><br><span class="line">    <span class="comment"># M step</span></span><br><span class="line">    new_theta_A = counts[<span class="string">'A'</span>][<span class="string">'H'</span>] / (counts[<span class="string">'A'</span>][<span class="string">'H'</span>] + counts[<span class="string">'A'</span>][<span class="string">'T'</span>])  <span class="comment">#sum p(y_i=1|x,theta)*x_i / sum 10*p(y_i=1|x,theta)</span></span><br><span class="line">    new_theta_B = counts[<span class="string">'B'</span>][<span class="string">'H'</span>] / (counts[<span class="string">'B'</span>][<span class="string">'H'</span>] + counts[<span class="string">'B'</span>][<span class="string">'T'</span>])  <span class="comment">#sum p(y_i=0|x,theta)*x_i / sum 10*p(y_i=1|x,theta)</span></span><br><span class="line">    <span class="keyword">return</span> [new_theta_A,new_theta_B]</span><br><span class="line">    </span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">em</span><span class="params">(observations,prior,tol = <span class="number">1e-6</span>,iterations=<span class="number">10000</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    EM算法</span></span><br><span class="line"><span class="string">    ：param observations :觀測數據</span></span><br><span class="line"><span class="string">    ：param prior：模型初始值</span></span><br><span class="line"><span class="string">    ：param tol：迭代结束阈值</span></span><br><span class="line"><span class="string">    ：param iterations：最大迭代次數</span></span><br><span class="line"><span class="string">    ：return：局部最佳的模型參數</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    iteration = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> iteration &lt; iterations:</span><br><span class="line">        new_prior = em_single(prior,observations)</span><br><span class="line">        delta_change = np.abs(prior[<span class="number">0</span>]-new_prior[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> delta_change &lt; tol:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prior = new_prior</span><br><span class="line">            iteration +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> new_prior,iteration</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"(p,q,iteration)="</span>,em(observations,[<span class="number">0.7</span>,<span class="number">0.5</span>]))</span><br></pre></td></tr></table></figure><p>Ans : (p,q,iteration)= ([0.79678865844706648, 0.51958340803243785], 12)</p></2></1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/1121509ac1dc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;參考網址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://web.mit.edu/6.435/www/Dempste
      
    
    </summary>
    
      <category term="機器學習" scheme="https://caocharles.github.io/categories/machine-learning/"/>
    
    
      <category term="EM" scheme="https://caocharles.github.io/tags/EM/"/>
    
      <category term="Algorithm" scheme="https://caocharles.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>我的測試文章</title>
    <link href="https://caocharles.github.io/%E6%88%91%E7%9A%84%E6%B8%AC%E8%A9%A6%E6%96%87%E7%AB%A0/"/>
    <id>https://caocharles.github.io/我的測試文章/</id>
    <published>2018-08-27T08:23:30.000Z</published>
    <updated>2018-09-04T13:47:53.821Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://caocharles.github.io/">連結測試</a></p><p>打打看文字。</p><p>12345</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x+2y =5</span><br></pre></td></tr></table></figure><p>$$\sigma$$ </p><p>$$\frac{1}{2}$$ </p><p><a href="https://www.bigdatauniversity.com" target="_blank" rel="noopener"><img src="https://ibm.box.com/shared/static/jvcqp2iy2jlx2b32rmzdt0tx8lvxgzkp.png" width="300," align="center"></a></p><h1 align="center"><font size="5"> TENSORFLOW’S HELLO WORLD</font></h1><div class="alert alert-block alert-info" style="margin-top: 20px"><br><font size="3"><strong>In this notebook we will overview the basics of TensorFlow, learn it’s structures and see what is the motivation to use it</strong></font><br><br><br> - <p><a href="#ref2">How does TensorFlow work?</a></p><br> - <p><a href="#ref3">Building a Graph</a></p><br> - <p><a href="#ref4">Defining multidimensional arrays using TensorFlow</a></p><br> - <p><a href="#ref5">Why Tensors?</a></p><br> - <p><a href="#ref6">Variables</a></p><br> - <p><a href="#ref7">Placeholders</a></p><br> - <p><a href="#ref8">Operations</a></p><br><p></p><br></div><br><br><br><br>—————-<br><br><a id="ref2"></a><br><br># How does TensorFlow work?<br><br>TensorFlow’s capability to execute the code on different devices such as CPUs and GPUs is a consequence of it’s specific structure:<br><br>TensorFlow defines computations as Graphs, and these are made with operations (also know as “ops”). So, when we work with TensorFlow, it is the same as defining a series of operations in a Graph.<br><br>To execute these operations as computations, we must launch the Graph into a Session. The session translates and passes the operations represented into the graphs to the device you want to execute them on, be it a GPU or CPU.<br><br>For example, the image below represents a graph in TensorFlow. _W_, _x_ and b are tensors over the edges of this graph. _MatMul_ is an operation over the tensors _W_ and _x_, after that _Add_ is called and add the result of the previous operator with _b_. The resultant tensors of each operation cross the next one until the end where it’s possible to get the wanted result.<br><br><img src="https://ibm.box.com/shared/static/a94cgezzwbkrq02jzfjjljrcaozu5s2q.png"><br><br><br>### Importing TensorFlow<br><p>To use TensorFlow, we need to import the library. We imported it and optionally gave it the name “tf”, so the modules can be accessed by <strong>tf.module-name</strong>:<br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure><br><br>—————–<br><br><a id="ref3"></a><br># Building a Graph<br><br>As we said before, TensorFlow works as a graph computational model. Let’s create our first graph.<br><br>To create our first graph we will utilize <strong>source operations</strong>, which do not need any information input. These source operations or <strong>source ops</strong> will pass their information to other operations which will execute computations.<br><br>To create two source operations which will output numbers we will define two constants:<br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([<span class="number">2</span>])</span><br><span class="line">b = tf.constant([<span class="number">3</span>])</span><br></pre></td></tr></table></figure><br><br>After that, let’s make an operation over these variables. The function <strong>tf.add()</strong> adds two elements (you could also use <code>c = a + b</code>).<br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = tf.add(a,b)</span><br><span class="line"><span class="comment">#c = a + b is also a way to define the sum of the terms</span></span><br></pre></td></tr></table></figure><br><br>Then TensorFlow needs to initialize a session to run our code. Sessions are, in a way, a context for creating a graph inside TensorFlow. Let’s define our session:<br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session = tf.Session()</span><br></pre></td></tr></table></figure><br><br>Let’s run the session to get the result from the previous defined ‘c’ operation:<br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = session.run(c)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><br><br>Close the session to release resources:<br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.close()</span><br></pre></td></tr></table></figure><br><br>To avoid having to close sessions every time, we can define them in a <strong>with</strong> block, so after running the <strong>with</strong> block the session will close automatically:<br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> session:</span><br><span class="line">    result = session.run(c)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><br><br>Even this silly example of adding 2 constants to reach a simple result defines the basis of TensorFlow. Define your edge (In this case our constants), include nodes (operations, like _tf.add_), and start a session to build a graph.<br><br><br><br>### What is the meaning of Tensor?<br><br><div class="alert alert-success alertsuccess" style="margin-top: 20px"><br><font size="3"><strong>In TensorFlow all data is passed between operations in a computation graph, and these are passed in the form of Tensors, hence the name of TensorFlow.</strong></font><br><br><br><br><br>The word <strong>tensor</strong> from new latin means “that which stretches”. It is a mathematical object that is named <strong>tensor</strong>  because an early application of tensors was the study of materials stretching under tension. The contemporary meaning of tensors can be taken as multidimensional arrays.<br><br><p></p><br><br></div></p><p>That’s great, but… what are these multidimensional arrays? </p><p>Going back a little bit to physics to understand the concept of dimensions:<br><br><img src="https://ibm.box.com/shared/static/ymn0hl3hf8s3xb4k15v22y5vmuodnue1.svg"></p><div style="text-align:center"><a href="https://en.wikipedia.org/wiki/Dimension" target="_blank" rel="noopener">[Image Source]</a> </div><p>The zero dimension can be seen as a point, a single object or a single item.</p><p>The first dimension can be seen as a line, a one-dimensional array can be seen as numbers along this line, or as points along the line. One dimension can contain infinite zero dimension/points elements.</p><p>The second dimension can be seen as a surface, a two-dimensional array can be seen as an infinite series of lines along an infinite line. </p><p>The third dimension can be seen as volume, a three-dimensional array can be seen as an infinite series of surfaces along an infinite line.</p><p>The Fourth dimension can be seen as the hyperspace or spacetime, a volume varying through time, or an infinite series of volumes along an infinite line. And so forth on…</p><p>As mathematical objects: <br><br><br><img src="https://ibm.box.com/shared/static/kmxz570uai8eeg6i6ynqdz6kmlx1m422.png"></p><div style="text-align:center"><a href="https://book.mql4.com/variables/arrays" target="_blank" rel="noopener">[Image Source]</a></div><p>Summarizing:<br><br></p><table style="width:100%"><br>  <tr><br>    <td><b>Dimension</b></td><br>    <td><b>Physical Representation</b></td><br>    <td><b>Mathematical Object</b></td><br>    <td><b>In Code</b></td><br>  </tr><br><br>  <tr><br>    <td>Zero </td><br>    <td>Point</td><br>    <td>Scalar (Single Number)</td><br>    <td>[ 1 ]</td><br>  </tr><br><br>  <tr><br>    <td>One</td><br>    <td>Line</td><br>    <td>Vector (Series of Numbers) </td><br>    <td>[ 1,2,3,4,… ]</td><br>  </tr><br><br>   <tr><br>    <td>Two</td><br>    <td>Surface</td><br>    <td>Matrix (Table of Numbers)</td><br>    <td>[ [1,2,3,4,…], [1,2,3,4,…], [1,2,3,4,…],… ]</td><br>  </tr><br><br>   <tr><br>    <td>Three</td><br>    <td>Volume</td><br>    <td>Tensor (Cube of Numbers)</td><br>    <td>[ [[1,2,…], [1,2,…], [1,2,…],…], [[1,2,…], [1,2,…], [1,2,…],…], [[1,2,…], [1,2,…], [1,2,…] ,…]… ]</td><br>  </tr><br><br></table><hr><p><a id="ref4"></a></p><h1 id="Defining-multidimensional-arrays-using-TensorFlow"><a href="#Defining-multidimensional-arrays-using-TensorFlow" class="headerlink" title="Defining multidimensional arrays using TensorFlow"></a>Defining multidimensional arrays using TensorFlow</h1><p>Now we will try to define such arrays using TensorFlow:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Scalar = tf.constant([<span class="number">2</span>])</span><br><span class="line">Vector = tf.constant([<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>])</span><br><span class="line">Matrix = tf.constant([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line">Tensor = tf.constant( [ [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]] , [[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]] , [[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]] ] )</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> session:</span><br><span class="line">    result = session.run(Scalar)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Scalar (1 entry):\n %s \n"</span> % result)</span><br><span class="line">    result = session.run(Vector)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Vector (3 entries) :\n %s \n"</span> % result)</span><br><span class="line">    result = session.run(Matrix)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Matrix (3x3 entries):\n %s \n"</span> % result)</span><br><span class="line">    result = session.run(Tensor)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Tensor (3x3x3 entries) :\n %s \n"</span> % result)</span><br></pre></td></tr></table></figure><p>Now that you understand these data structures, I encourage you to play with them using some previous functions to see how they will behave, according to their structure types:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Matrix_one = tf.constant([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line">Matrix_two = tf.constant([[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line">first_operation = tf.add(Matrix_one, Matrix_two)</span><br><span class="line">second_operation = Matrix_one + Matrix_two</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> session:</span><br><span class="line">    result = session.run(first_operation)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Defined using tensorflow function :"</span>)</span><br><span class="line">    print(result)</span><br><span class="line">    result = session.run(second_operation)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Defined using normal expressions :"</span>)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>With the regular symbol definition and also the TensorFlow function we were able to get an element-wise multiplication, also known as Hadamard product. <br></p><p>But what if we want the regular matrix product?</p><p>We then need to use another TensorFlow function called <strong>tf.matmul()</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Matrix_one = tf.constant([[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">Matrix_two = tf.constant([[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">first_operation = tf.matmul(Matrix_one, Matrix_two)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> session:</span><br><span class="line">    result = session.run(first_operation)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Defined using tensorflow function :"</span>)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>We could also define this multiplication ourselves, but there is a function that already does that, so no need to reinvent the wheel!</p><hr><p><a id="ref5"></a></p><h1 id="Why-Tensors"><a href="#Why-Tensors" class="headerlink" title="Why Tensors?"></a>Why Tensors?</h1><p>The Tensor structure helps us by giving the freedom to shape the dataset the way we want.</p><p>And it is particularly helpful when dealing with images, due to the nature of how information in images are encoded,</p><p>Thinking about images, its easy to understand that it has a height and width, so it would make sense to represent the information contained in it with a two dimensional strucutre (a matrix)… until you remember that images have colors, and to add information about the colors, we need another dimension, and thats when Tensors become particulary helpful.</p><p>Images are encoded into color channels, the image data is represented into each color intensity in a color channel at a given point, the most common one being RGB, which means Red, Blue and Green. The information contained into an image is the intensity of each channel color into the width and height of the image, just like this:</p><p><img src="https://ibm.box.com/shared/static/xlpv9h5xws248c09k1rlx7cer69y4grh.png"></p><div style="text-align:center"><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn424131.aspx" target="_blank" rel="noopener">[Image Source]</a></div><p>So the intensity of the red channel at each point with width and height can be represented into a matrix, the same goes for the blue and green channels, so we end up having three matrices, and when these are combined they form a tensor. </p><hr><p><a id="ref6"></a></p><h1 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h1><p>Now that we are more familiar with the structure of data, we will take a look at how TensorFlow handles variables.</p><p>To define variables we use the command <strong>tf.variable()</strong>.<br>To be able to use variables in a computation graph it is necessary to initialize them before running the graph in a session. This is done by running <strong>tf.global_variables_initializer()</strong>.</p><p>To update the value of a variable, we simply run an assign operation that assigns a value to the variable:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state = tf.Variable(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>Let’s first create a simple counter, a variable that increases one unit at a time:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">one = tf.constant(<span class="number">1</span>)</span><br><span class="line">new_value = tf.add(state, one)</span><br><span class="line">update = tf.assign(state, new_value)</span><br></pre></td></tr></table></figure><p>Variables must be initialized by running an initialization operation after having launched the graph.  We first have to add the initialization operation to the graph:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init_op = tf.global_variables_initializer()</span><br></pre></td></tr></table></figure><p>We then start a session to run the graph, first initialize the variables, then print the initial value of the <strong>state</strong> variable, and then run the operation of updating the <strong>state</strong> variable and printing the result after each update:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> session:</span><br><span class="line">  session.run(init_op)</span><br><span class="line">  print(session.run(state))</span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    session.run(update)</span><br><span class="line">    print(session.run(state))</span><br></pre></td></tr></table></figure><hr><p><a id="ref7"></a></p><h1 id="Placeholders"><a href="#Placeholders" class="headerlink" title="Placeholders"></a>Placeholders</h1><p>Now we know how to manipulate variables inside TensorFlow, but what about feeding data outside of a TensorFlow model? </p><p>If you want to feed data to a TensorFlow model from outside a model, you will need to use placeholders.</p><p>So what are these placeholders and what do they do? </p><p>Placeholders can be seen as “holes” in your model, “holes” which you will pass the data to, you can create them using <br> <b>tf.placeholder(_datatype_)</b>, where <b>_datatype_</b> specifies the type of data (integers, floating points, strings, booleans) along with its precision (8, 16, 32, 64) bits.</p><p>The definition of each data type with the respective python sintax is defined as:</p><table><thead><tr><th>Data type</th><th>Python type</th><th>Description</th></tr></thead><tbody><tr><td>DT_FLOAT</td><td>tf.float32</td><td>32 bits floating point.</td></tr><tr><td>DT_DOUBLE</td><td>tf.float64</td><td>64 bits floating point.</td></tr><tr><td>DT_INT8</td><td>tf.int8</td><td>8 bits signed integer.</td></tr><tr><td>DT_INT16</td><td>tf.int16</td><td>16 bits signed integer.</td></tr><tr><td>DT_INT32</td><td>tf.int32</td><td>32 bits signed integer.</td></tr><tr><td>DT_INT64</td><td>tf.int64</td><td>64 bits signed integer.</td></tr><tr><td>DT_UINT8</td><td>tf.uint8</td><td>8 bits unsigned integer.</td></tr><tr><td>DT_STRING</td><td>tf.string</td><td>Variable length byte arrays. Each element of a Tensor is a byte array.</td></tr><tr><td>DT_BOOL</td><td>tf.bool</td><td>Boolean.</td></tr><tr><td>DT_COMPLEX64</td><td>tf.complex64</td><td>Complex number made of two 32 bits floating points: real and imaginary parts.</td></tr><tr><td>DT_COMPLEX128</td><td>tf.complex128</td><td>Complex number made of two 64 bits floating points: real and imaginary parts.</td></tr><tr><td>DT_QINT8</td><td>tf.qint8</td><td>8 bits signed integer used in quantized Ops.</td></tr><tr><td>DT_QINT32</td><td>tf.qint32</td><td>32 bits signed integer used in quantized Ops.</td></tr><tr><td>DT_QUINT8</td><td>tf.quint8</td><td>8 bits unsigned integer used in quantized Ops.</td></tr></tbody></table><div style="text-align:center"><a href="https://www.tensorflow.org/versions/r0.9/resources/dims_types.html" target="_blank" rel="noopener">[Table Source]</a></div><p>So we create a placeholder:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = tf.placeholder(tf.float32)</span><br></pre></td></tr></table></figure><p>And define a simple multiplication operation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a*<span class="number">2</span></span><br></pre></td></tr></table></figure><p>Now we need to define and run the session, but since we created a “hole” in the model to pass the data, when we initialize the session we are obligated to pass an argument with the data, otherwise we would get an error.</p><p>To pass the data to the model we call the session with an extra argument <b> feed_dict</b> in which we should pass a dictionary with each placeholder name folowed by its respective data, just like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result = sess.run(b,feed_dict=&#123;a:<span class="number">3.5</span>&#125;)</span><br><span class="line">    <span class="keyword">print</span> (result)</span><br></pre></td></tr></table></figure><p>Since data in TensorFlow is passed in form of multidimensional arrays we can pass any kind of tensor through the placeholders to get the answer to the simple multiplication operation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dictionary=&#123;a: [ [ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>] ] , [ [<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>],[<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>],[<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>],[<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>] ] ] &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result = sess.run(b,feed_dict=dictionary)</span><br><span class="line">    <span class="keyword">print</span> (result)</span><br></pre></td></tr></table></figure><hr><p><a id="ref8"></a></p><h1 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h1><p>Operations are nodes that represent the mathematical operations over the tensors on a graph. These operations can be any kind of functions, like add and subtract tensor or maybe an activation function.</p><p>_tf.matmul_, _tf.add_, _tf.nn.sigmoid_ are some of the operations in TensorFlow. These are like functions in python but operate directly over tensors and each one does a specific thing. </p><div class="alert alert-success alertsuccess" style="margin-top: 20px">Other operations can be easily found in: <a href="https://www.tensorflow.org/versions/r0.9/api_docs/python/index.html" target="_blank" rel="noopener">https://www.tensorflow.org/versions/r0.9/api_docs/python/index.html</a></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([<span class="number">5</span>])</span><br><span class="line">b = tf.constant([<span class="number">2</span>])</span><br><span class="line">c = tf.add(a,b)</span><br><span class="line">d = tf.subtract(a,b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> session:</span><br><span class="line">    result = session.run(c)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'c =: %s'</span> % result)</span><br><span class="line">    result = session.run(d)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'d =: %s'</span> % result)</span><br></pre></td></tr></table></figure><p>_tf.nn.sigmoid_ is an activiation function, it’s a little more complicated, but this function helps learning models to evaluate what kind of information is good or not.</p><hr><h2 id="Want-to-learn-more"><a href="#Want-to-learn-more" class="headerlink" title="Want to learn more?"></a>Want to learn more?</h2><p>Running deep learning programs usually needs a high performance platform. PowerAI speeds up deep learning and AI. Built on IBM’s Power Systems, PowerAI is a scalable software platform that accelerates deep learning and AI with blazing performance for individual users or enterprises. The PowerAI platform supports popular machine learning libraries and dependencies including Tensorflow, Caffe, Torch, and Theano. You can download a <a href="https://cocl.us/ML0120EN_PAI" target="_blank" rel="noopener">free version of PowerAI</a>.</p><p>Also, you can use Data Science Experience to run these notebooks faster with bigger datasets. Data Science Experience is IBM’s leading cloud solution for data scientists, built by data scientists. With Jupyter notebooks, RStudio, Apache Spark and popular libraries pre-packaged in the cloud, DSX enables data scientists to collaborate on their projects without having to install anything. Join the fast-growing community of DSX users today with a free account at <a href="https://cocl.us/ML0120EN_DSX" target="_blank" rel="noopener">Data Science Experience</a>This is the end of this lesson. Hopefully, now you have a deeper and intuitive understanding regarding the LSTM model. Thank you for reading this notebook, and good luck on your studies.</p><h3 id="Thanks-for-completing-this-lesson"><a href="#Thanks-for-completing-this-lesson" class="headerlink" title="Thanks for completing this lesson!"></a>Thanks for completing this lesson!</h3><p>Notebook created by: <a href="https://ca.linkedin.com/in/rafaelblsilva" target="_blank" rel="noopener"> Rafael Belo Da Silva </a> </p><h3 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h3><p><a href="https://www.tensorflow.org/versions/r0.9/get_started/index.html" target="_blank" rel="noopener">https://www.tensorflow.org/versions/r0.9/get_started/index.html</a><br><br><a href="http://jrmeyer.github.io/tutorial/2016/02/01/TensorFlow-Tutorial.html" target="_blank" rel="noopener">http://jrmeyer.github.io/tutorial/2016/02/01/TensorFlow-Tutorial.html</a><br><br><a href="https://www.tensorflow.org/versions/r0.9/api_docs/python/index.html" target="_blank" rel="noopener">https://www.tensorflow.org/versions/r0.9/api_docs/python/index.html</a><br><br><a href="https://www.tensorflow.org/versions/r0.9/resources/dims_types.html" target="_blank" rel="noopener">https://www.tensorflow.org/versions/r0.9/resources/dims_types.html</a><br><br><a href="https://en.wikipedia.org/wiki/Dimension" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Dimension</a><br><br><a href="https://book.mql4.com/variables/arrays" target="_blank" rel="noopener">https://book.mql4.com/variables/arrays</a><br><br><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn424131(v=vs.85).aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/windows/desktop/dn424131(v=vs.85).aspx</a><br></p><p><hr><br>Copyright &copy; 2016 <a href="https://bigdatauniversity.com/?utm_source=bducopyrightlink&amp;utm_medium=dswb&amp;utm_campaign=bdu" target="_blank" rel="noopener">Big Data University</a>. This notebook and its source code are released under the terms of the <a href="https://bigdatauniversity.com/mit-license/" target="_blank" rel="noopener">MIT License</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://caocharles.github.io/&quot;&gt;連結測試&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打打看文字。&lt;/p&gt;
&lt;p&gt;12345&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="這是分類" scheme="https://caocharles.github.io/categories/%E9%80%99%E6%98%AF%E5%88%86%E9%A1%9E/"/>
    
      <category term="這是子分類" scheme="https://caocharles.github.io/categories/%E9%80%99%E6%98%AF%E5%88%86%E9%A1%9E/%E9%80%99%E6%98%AF%E5%AD%90%E5%88%86%E9%A1%9E/"/>
    
    
      <category term="這是標籤" scheme="https://caocharles.github.io/tags/%E9%80%99%E6%98%AF%E6%A8%99%E7%B1%A4/"/>
    
      <category term="這是標籤2" scheme="https://caocharles.github.io/tags/%E9%80%99%E6%98%AF%E6%A8%99%E7%B1%A42/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://caocharles.github.io/hello-world/"/>
    <id>https://caocharles.github.io/hello-world/</id>
    <published>2018-08-27T07:58:15.056Z</published>
    <updated>2018-08-27T07:58:15.057Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
